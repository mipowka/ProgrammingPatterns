получение последовательного доступа ко всем элементам составного объекта скрывая его реализацию

явное использование паттерна класс Iterator в Java Core

В Spring Framework паттерн Iterator (Итератор) активно используется для работы с коллекциями,
    например, при итерации по бинам или ресурсам, хранимым в контексте Spring. Одна из явных реализаций
    паттерна Iterator — это использование BeanFactory и ApplicationContext для получения коллекций бинов.

BeanFactory и ApplicationContext: В Spring можно итерировать по всем бинам, определенным в контексте,
    используя методы getBeansOfType(), getBeansOfType(Class<T> type) и другие методы для получения коллекций бинов.
    Эти методы используют паттерн Iterator, предоставляя возможность последовательно перебирать элементы.

Spring также поддерживает коллекции, которые реализуют интерфейс Iterable. Например, при использовании
    @Repository для работы с базой данных через Spring Data JPA, репозитории возвращают Iterable или List коллекции,
    которые можно итерировать.

Еще один пример, где можно встретить паттерн Iterator в Spring — это использование JdbcTemplate для работы с
    результатами SQL-запросов. Например, когда вы выполняете запрос, возвращающий несколько строк, Spring
    использует Iterator для перебора строк результата.

======================================================================================================================
В Spring Framework паттерн Iterator можно встретить в нескольких компонентах, таких как:

    ApplicationContext — используется для получения коллекций бинов с помощью методов
    типа getBeansOfType(), что позволяет итерировать по всем бинам, подходящим под
    заданный тип.

    Iterable и Iterator — используются в Spring Data JPA и других местах для работы с
    коллекциями данных.

    JdbcTemplate — для работы с результатами SQL-запросов, когда нужно перебирать строки
    данных.

