определение зависимости один ко многим между объектами таким образом чтобы при изменении состояния одного объекта
    все зависящие от него объекты были уведомлены об этом и обновились

В Spring Framework паттерн Observer (Наблюдатель) реализуется через механизм событий, что позволяет
    компонентам приложения подписываться на события и реагировать на них, не имея жесткой связи с объектами,
    которые генерируют эти события. В Spring это реализуется через систему событий Spring
    (через интерфейсы ApplicationEventPublisher и ApplicationListener), которая является классическим примером
    применения паттерна Observer.

Основные классы, реализующие паттерн Observer в Spring:

ApplicationEventPublisher — это интерфейс, который предоставляет метод для
    публикации событий в контексте Spring.

ApplicationListener — это интерфейс для создания слушателей событий, которые
    подписываются на события и обрабатывают их.

Каждый раз, когда происходит событие (например, действие в приложении), ApplicationEventPublisher
    распространяет это событие среди всех зарегистрированных слушателей, что является примером паттерна Observer.

Другие примеры использования Observer в Spring:

@EventListener: В Spring можно использовать аннотацию @EventListener, чтобы подписаться на события.
    Это более удобный и декларативный способ создания слушателей событий.

Spring Integration: В Spring Integration паттерн Observer используется для обработки сообщений между
    компонентами, которые подписываются на каналы сообщений. В этом случае каналы сообщений и
    обработчики сообщений выступают в роли Observer и Subject.

Spring Security: В некоторых случаях, например, при изменении состояния аутентификации или авторизации,
    события могут быть использованы для уведомления различных частей приложения, что также является примером
    использования паттерна Observer.

====================================================================================================================
ApplicationEventPublisher и ApplicationListener являются явными примерами классов в Spring,
    реализующих паттерн Observer. ApplicationEventPublisher публикует события, а ApplicationListener
    подписывается на эти события и обрабатывает их. Такой подход помогает уменьшить зависимость между
    компонентами приложения и делает систему более гибкой и расширяемой.



