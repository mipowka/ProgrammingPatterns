управление поведением объекта в зависимости от его внутреннего состояния

в Java Core явным примером является Thread

Spring WebFlow — это один из ярких примеров использования паттерна State в Spring.
    WebFlow используется для управления состоянием процессов и переходами между
    различными состояниями в рамках веб-приложений.

В Spring WebFlow каждый FlowExecution (выполнение потока) и Flow (поток) могут иметь
    несколько состояний, и переходы между этими состояниями управляются логикой потока.
    Это типичный пример паттерна State, где состояние процесса зависит от контекста (например, текущего шага в процессе).

Flow — это последовательность шагов (состояний), в которой каждое
    состояние зависит от предыдущего.

FlowExecution — это конкретное выполнение потока, которое может находиться
    в одном из возможных состояний потока.

Spring State Machine — это еще один фреймворк от Spring, который специально разработан для работы
    с паттерном State. Он позволяет разработчикам легко создавать системы, состоящие из состояний
    и переходов между ними, и реализует паттерн State в полном объеме.

В Spring State Machine система управляется состояниями и переходами, что является точной реализацией
    паттерна State. У каждого состояния могут быть связанные действия, и система может переходить
    между этими состояниями на основе определенных событий.

Механизм управления транзакциями в Spring также можно интерпретировать как использование паттерна State.
    В Spring Transaction объект TransactionStatus представляет собой текущее состояние транзакции,
    которое может быть либо ACTIVE, либо COMMITTED, либо ROLLEDBACK. Система автоматически управляет
    переходами между этими состояниями в зависимости от выполнения транзакции.

В Spring Security также используется паттерн State для управления состоянием аутентификации и авторизации.
    Например, при аутентификации пользователя он может проходить через несколько состояний, таких как
    AUTHENTICATED, UNAUTHENTICATED, и FAILED. Эти состояния могут быть изменены в зависимости от действия пользователя,
    например, после успешного ввода правильного пароля, система меняет состояние на AUTHENTICATED.

Пример состояния в Spring Security:
Spring Security использует фильтры, которые могут изменять состояние пользователя в процессе аутентификации и
    авторизации, переходя через различные шаги, такие как:
        Authenticating (пользователь пытается войти),

        Authenticated (пользователь успешно вошел),

        Failed (ошибка при аутентификации).

=====================================================================================================================
В Spring Framework паттерн State используется в нескольких компонентах:

Spring WebFlow — управление состоянием бизнес-процессов и переходами между состояниями.

Spring State Machine — полноценная библиотека для создания конечных автоматов с состояниями и переходами.

Spring Transaction Management — управление состоянием транзакции (активное, коммит/откат).

Spring Security — управление состоянием аутентификации и авторизации.

Все эти компоненты помогают организовать управление состоянием в приложении, делая его более гибким,
    масштабируемым и удобным для разработки.