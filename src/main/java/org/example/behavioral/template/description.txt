определение основы класса и создание возможности подклассам переопределять его части

Основные классы в Spring, реализующие паттерн Template Method:
    JdbcTemplate (Spring JDBC)
    JpaTemplate (Spring Data JPA)
    TransactionTemplate (Spring Transaction Management)
    RestTemplate (Spring Web)
    TaskExecutor (Spring Scheduling)

JdbcTemplate — Шаблон для работы с базой данных (JDBC)
JdbcTemplate является классическим примером реализации паттерна Template Method в Spring. Он
    инкапсулирует всю сложность работы с JDBC, такую как открытие соединения, выполнение SQL-запросов,
    обработка исключений и закрытие ресурсов. В то же время, он предоставляет разработчикам возможность менять
    конкретные шаги выполнения, например, способ маппинга результата запроса в объект.

JpaTemplate — Шаблон для работы с JPA (Java Persistence API)
Хотя JpaTemplate больше не используется в последних версиях Spring (вместо этого используется JpaRepository),
    в старых версиях Spring Data JPA был класс JpaTemplate, который предоставлял шаблон для работы с JPA.
    Он обеспечивал шаблонный метод для выполнения операций с базой данных, таких как сохранение сущности,
    извлечение и обновление, оставляя отдельные шаги реализации на усмотрение разработчика.

TransactionTemplate — Шаблон для управления транзакциями
TransactionTemplate используется для управления транзакциями в Spring. Он предоставляет шаблонный метод для
    выполнения операций с транзакциями. Алгоритм транзакционного процесса уже определен, и вам нужно только
    реализовать конкретные шаги, такие как логика бизнес-операции, которую нужно выполнить в рамках транзакции.

RestTemplate — Шаблон для выполнения HTTP-запросов
RestTemplate является еще одним примером шаблонного метода в Spring. Он инкапсулирует выполнение
    HTTP-запросов (GET, POST, PUT, DELETE и другие), предоставляя шаблон, в который могут быть внедрены
    различные шаги, такие как обработка параметров запроса, конфигурация заголовков и обработка ответа.

TaskExecutor — Шаблон для асинхронного выполнения задач
TaskExecutor предоставляет шаблонный метод для асинхронного выполнения задач. В зависимости от того,
    какой конкретный тип выполнения вам нужен (например, с использованием пула потоков или одиночного потока),
    вы можете выбрать подходящий TaskExecutor.

=======================================================================================================================
Паттерн Template Method используется в Spring Framework для инкапсуляции общих алгоритмов выполнения
    различных операций, позволяя пользователю изменять или конфигурировать конкретные шаги этих алгоритмов.
    Некоторые из основных классов, реализующих этот паттерн:

JdbcTemplate — шаблон для работы с JDBC.
TransactionTemplate — шаблон для работы с транзакциями.
RestTemplate — шаблон для выполнения HTTP-запросов.
TaskExecutor — шаблон для асинхронного выполнения задач.
JpaTemplate (устаревший) — шаблон для работы с JPA.

Эти классы помогают упростить код, уменьшают дублирование и обеспечивают
    гибкость при изменении отдельных шагов алгоритма.