описание действий которые выполняются с каждым объектом в некоторой структуре

FileVisitor в Java Core

В Spring этот паттерн встречается в следующих областях:

Spring AOP (Aspect-Oriented Programming)
Spring Expression Language (SpEL)
Spring WebFlux (в контексте обработки реактивных потоков)

Spring AOP (Aspect-Oriented Programming)
В Spring AOP можно встретить концепцию, схожую с паттерном Visitor, через механизм срезов (advice),
    которые выполняются на определенных точках исполнения программы, предоставляя возможность "посетить"
    методы (или классы) и выполнить дополнительные действия. Здесь срезы (advice) и аспекты можно
    рассматривать как посетители, а объекты, над которыми они работают, — это элементы, которые
    "принимают" этих посетителей.

Spring Expression Language (SpEL)
В Spring Expression Language (SpEL) используется концепция визиторов через выражения, которые могут быть
    выполнены на объектах во время их обработки. Спел может применяться к различным объектам, выполняя операции,
    которые похожи на визиторов, меняя или извлекая данные, не изменяя сами объекты.

Spring WebFlux (реактивный поток данных)
В Spring WebFlux, когда работа ведется с реактивными потоками данных (например, с использованием Flux и Mono),
    можно наблюдать применение паттерна Visitor. Например, Mono и Flux можно рассматривать как контейнеры,
    которые "посещаются" различными операторами (например, map, filter, flatMap и другими), которые выполняют
    разные операции на данных.

Spring Data (JPA, MongoDB, etc.)
В Spring Data также можно найти элементы, которые напоминают паттерн Visitor, особенно при работе с критериями
    запросов (например, через Criteria API). Конструкция Criteria позволяет создавать запросы к базе данных,
    инкапсулируя различные этапы выполнения запроса в виде "посетителей", которые выполняют операции над сущностями
    и создают нужные запросы.
=====================================================================================================================
Паттерн Visitor в Spring Framework используется в ряде компонентов, где требуется выполнять различные операции
    на объектах без изменения самих объектов. Примеры включают:

Spring AOP (Aspect-Oriented Programming) — добавление поведения до и после вызова методов,
    аналогичное паттерну Visitor.
Spring Expression Language (SpEL) — выполнение выражений на объектах в контексте Spring.
Spring WebFlux — реактивные операторы (например, map, filter, flatMap), которые работают с потоками данных,
    изменяя их без изменения самих объектов.
Spring Data — использование Criteria API для создания запросов, инкапсулируя логику выполнения запросов.

Хотя в Spring нет явной реализации паттерна Visitor, его принципы активно применяются через различные механизмы,
    такие как AOP, выражения и операторы для обработки данных.