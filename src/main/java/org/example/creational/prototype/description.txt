Паттерн прототип позволяет создать новый объект клонируя уже существующие

В Spring Framework этот паттерн реализуется в основном через механизмы управления жизненным
    циклом бинов. В Spring Prototype используется для создания бинов, которые должны быть независимыми друг
    от друга, с уникальными состояниями при каждом запросе.

В Spring можно настроить scope бина как prototype, что означает, что каждый раз при запросе будет создаваться
    новый экземпляр бина. Это противоположно стандартному скоупу singleton, где создается только один
    экземпляр бина для всего приложения.

@Scope("prototype")
Основной механизм для реализации паттерна Prototype в Spring — это аннотация @Scope, которая позволяет задавать
    жизненный цикл бина. В случае "prototype" каждый раз, когда контейнер запрашивает бин, он создает новый экземпляр.

BeanFactory и ApplicationContext
При использовании prototype-скоупа, Spring контейнер сам будет создавать новый экземпляр бина при каждом запросе
    через BeanFactory или ApplicationContext. Контейнер будет по умолчанию использовать метод getBean() для
    создания нового экземпляра при каждом вызове, если бин имеет скоуп prototype.

PrototypeBean (Пример через @Bean в Java-конфигурации)
В Java-конфигурации можно использовать аннотацию @Scope("prototype") в сочетании с @Bean для создания бина с прототипом.

FactoryBean
FactoryBean — это интерфейс, предоставляющий более гибкий способ создания объектов. С помощью FactoryBean можно
    реализовать Prototype-подобное поведение, позволяя создавать бин, каждый раз возвращая новый экземпляр.

AbstractPrototypeBean (гибридный пример с использованием абстракции)
Spring позволяет создавать prototype бины с абстракцией через абстрактные классы или интерфейсы, что может быть
    полезно, если требуется реализовать сложные фабричные методы с дополнительной логикой для создания экземпляров.
=======================================================================================================================

В Spring Framework паттерн Prototype активно используется через механизм скоупов. Основной способ работы с
    prototype-бином — это аннотация @Scope("prototype"), которая гарантирует создание нового экземпляра объекта
    при каждом запросе. Это позволяет создавать объекты с уникальными состояниями, не зависящими от других экземпляров.

Основные классы и механизмы, реализующие паттерн Prototype в Spring:
    @Scope("prototype") — аннотация для установки скоупа бина.
    BeanFactory и ApplicationContext — для управления прототипами и их созданием.
    FactoryBean — интерфейс, который позволяет создавать объекты через фабричные методы, возвращающие новые экземпляры.
    **Java-конфигурация с @Bean и @Scope("prototype") — для явной конфигурации бинов с прототипом.

Использование Prototype скоупа подходит для создания независимых объектов, которые не должны разделять
    свое состояние, что позволяет повысить гибкость и масштабируемость приложений.