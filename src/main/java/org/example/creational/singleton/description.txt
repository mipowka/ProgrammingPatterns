singleton - контролирует создание единственного экземпляра класса и
        предоставляет глобальную точку доступа к нему

В Spring Framework паттерн Singleton является по умолчанию для всех бинов, если явно не указан другой скоуп.
    Это означает, что Spring создает только один экземпляр бина в контейнере и использует его для всех запросов.

Spring управляет синглтонами через механизмы управления жизненным циклом бинов, а скоуп singleton является
    значением по умолчанию, если не указано другое.

ApplicationContext и BeanFactory
ApplicationContext и BeanFactory — это основные компоненты, которые управляют бинами в Spring и реализуют
    паттерн Singleton. По умолчанию, если скоуп бина не указан, Spring создает только один экземпляр этого бина.

@Scope("singleton")
Хотя скоуп singleton является значением по умолчанию в Spring, его можно явно указать с помощью аннотации
    @Scope("singleton"). Это полезно для документации и ясности, чтобы явным образом указать,
    что бин должен быть синглтоном.

@Component и другие аннотации для компонентов
Аннотация @Component (или ее специализированные производные, такие как @Service, @Repository, @Controller)
    также использует паттерн Singleton по умолчанию. Все эти аннотации создают синглтон-бин, если не указано иначе.

@Configuration (Java-конфигурация)
Когда вы используете Java-конфигурацию с аннотацией @Configuration, бины, определенные внутри этого класса,
    по умолчанию также являются синглтонами, если не указано иное. Синглтон-диапазон здесь реализуется по умолчанию,
    когда вы создаете бины через методы с аннотацией @Bean.

@Lazy и Singleton
Использование аннотации @Lazy позволяет отложить создание синглтон-бина до первого его использования, но сам бин
    по-прежнему остается синглтоном, так как его жизненный цикл управляется Spring контейнером.
    Это может быть полезно, если нужно отложить создание бина, чтобы ускорить время старта приложения.

ApplicationContext.getBean()
Метод getBean() в ApplicationContext или BeanFactory является основным способом получения синглтон-бинов.
    Когда вызывается этот метод для бина с скоупом singleton, контейнер всегда возвращает тот же экземпляр,
    который был создан при старте приложения.

@Bean и @Scope("singleton")
Если необходимо, можно явно указать скоуп singleton при использовании @Bean в Java-конфигурации.
    По умолчанию, скоуп будет singleton, но явное указание может повысить читаемость конфигурации.

ObjectFactory (Spring's ObjectFactory интерфейс)
ObjectFactory — это интерфейс в Spring, который позволяет создавать бины с контролем над их созданием.
    Он может использоваться для создания синглтон-объектов, при этом Spring гарантирует, что синглтон будет
    один для всего приложения.
======================================================================================================================

В Spring паттерн Singleton реализован через механизмы скоупов и управления бинами, и является скоупом по умолчанию.

    Основные классы и механизмы, реализующие паттерн Singleton, включают:
        ApplicationContext и BeanFactory — для управления синглтонами в контейнере.
        @Scope("singleton") — явное указание скоупа singleton.
        @Component, @Service, @Repository, @Controller — компоненты Spring, которые по умолчанию
            создаются как синглтоны.
        @Bean в Java-конфигурации — для создания синглтон-бины.
        @Lazy — для отложенной инициализации синглтона.
        ObjectFactory — для получения синглтон-объектов с контролем их создания.

Этот паттерн помогает управлять жизненным циклом объектов и уменьшить потребление памяти, обеспечивая одну и ту
    же копию объекта для всего приложения.