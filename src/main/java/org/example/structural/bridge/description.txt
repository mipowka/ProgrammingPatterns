отделяет абстракцию от реализации чтобы можно было независимо друг от друга их изменять

В Spring Framework паттерн мост (Bridge) также находит несколько явных реализаций, хотя он применяется
    в основном для разделения абстракций и их реализации, что позволяет легко изменять реализации без
    изменения абстракций. Этот паттерн часто используется для обеспечения гибкости в связке с внешними
    библиотеками или компонентами, а также для улучшения расширяемости. Рассмотрим несколько примеров.

MessageSource и его реализации
В Spring MessageSource — это интерфейс для локализации сообщений. В данном контексте паттерн мост используется
    для разделения абстракции работы с сообщениями от их конкретной реализации.

Конкретные реализации MessageSource, такие как ResourceBundleMessageSource и ReloadableResourceBundleMessageSource,
    являются реализациями этого абстракционного интерфейса:
ResourceBundleMessageSource — использует java.util.ResourceBundle для поиска и загрузки сообщений.
ReloadableResourceBundleMessageSource — расширяет ResourceBundleMessageSource и поддерживает перезагрузку сообщений.

Таким образом, абстракция MessageSource остается неизменной, а реализация может быть изменена или адаптирована в
    зависимости от источника сообщений (например, использование других форматов локализации или дополнительных
    механизмов кэширования).

JdbcTemplate и базы данных
JdbcTemplate является одним из ярких примеров использования паттерна мост в Spring. Он предоставляет абстракцию
    для работы с базой данных, но сам по себе не зависит от конкретной реализации — это делает код гибким и
    переносимым между разными СУБД.

AbstractMessageChannel и каналы сообщений в Spring Integration
В Spring Integration паттерн мост активно используется в контексте работы с каналами сообщений.
    Абстракция AbstractMessageChannel и её реализации, такие как DirectChannel, QueueChannel,
    PublishSubscribeChannel и другие, обеспечивают гибкость в выборе способа передачи сообщений.

AbstractTransactionManager и менеджеры транзакций
Spring использует паттерн мост для работы с транзакциями через абстракцию AbstractTransactionManager и его
    конкретные реализации, такие как DataSourceTransactionManager и JpaTransactionManager.
    Эти реализации позволяют работать с транзакциями через разные источники данных и механизмы,
    не меняя основную логику управления транзакциями.

Template-классы для различных источников данных
Spring активно использует паттерн мост для реализации различных шаблонов для работы с разными источниками данных.
    Например, JdbcTemplate, RestTemplate, MongoTemplate и другие — все они предоставляют единый интерфейс для
    выполнения операций, но при этом они могут работать с разными типами источников данных.
====================================================================================================================
Паттерн мост в Spring Framework используется для разделения абстракций и их реализаций, что позволяет гибко изменять
    реализации без изменения самого интерфейса. Явные примеры использования моста включают работу с локализацией
    (через MessageSource), с базами данных (через JdbcTemplate и другие шаблоны), с транзакциями и
    каналами сообщений. Это позволяет повысить гибкость, расширяемость и масштабируемость приложений.