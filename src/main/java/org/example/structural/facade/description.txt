предоставить унифицированный интерфейс вместо нескольких интерфейсов подсистемы

Паттерн Facade в Spring используется для упрощения интерфейса к сложной системе, предоставляя единый более
    простой интерфейс для работы с несколькими компонентами или подсистемами. В Spring Framework несколько
    компонентов используют этот паттерн, чтобы скрыть внутренние сложности и предложить удобный API для
    взаимодействия с другими частями системы.

Spring's ApplicationContext как фасад для всего контейнера
В Spring ApplicationContext является центральным фасадом для всех операций с контейнером IoC (Inversion of Control).
    Он предоставляет единый интерфейс для получения бинов, работы с конфигурацией, обработкой событий и т. д.
    На самом деле ApplicationContext скрывает множество сложностей, таких как создание и управление зависимостями
    между бинами, конфигурацией и обработкой событий.

Spring Security - HttpSecurity как фасад для настройки безопасности
В Spring Security класс HttpSecurity служит фасадом для конфигурации безопасности веб-приложений. Он предоставляет
    удобный API для настройки аутентификации, авторизации, фильтров и других аспектов безопасности, скрывая при
    этом сложную настройку и взаимодействие с низкоуровневыми компонентами безопасности.

Spring Batch - JobLauncher как фасад для выполнения задач
В Spring Batch класс JobLauncher служит фасадом для выполнения различных задач и обработки батчевых процессов.
    Он позволяет запускать обработку данных, конфигурируя и управляя потоком задач, и скрывает от пользователя детали,
    связанные с конфигурацией и выполнением конкретных шагов внутри задачи.

Spring WebFlow - FlowExecutor как фасад для работы с процессами
В Spring WebFlow класс FlowExecutor является фасадом для работы с веб-процессами, скрывая детали их реализации.
    WebFlow представляет собой механизм для управления состоянием и переходами между состояниями в процессе
    веб-запроса, и FlowExecutor упрощает взаимодействие с этим механизмом.

DataSourceTransactionManager как фасад для управления транзакциями
В Spring Transaction Management класс DataSourceTransactionManager является фасадом для управления транзакциями.
    Он упрощает работу с транзакциями в контексте базы данных, скрывая детали взаимодействия с
    низкоуровневыми API (такими как JDBC).

Spring Integration - MessageChannel и MessageHandler как фасады для обработки сообщений
В Spring Integration используется паттерн фасад для упрощения работы с каналами и обработчиками сообщений.
    Например, MessageChannel и MessageHandler предоставляют простые интерфейсы для отправки и обработки сообщений,
    скрывая детали реализации интеграции с различными протоколами и технологиями.

Spring Boot - SpringApplication как фасад для настройки и запуска приложения
В Spring Boot класс SpringApplication является фасадом, который упрощает процесс запуска Spring-приложения.
    Он предоставляет удобные методы для настройки, конфигурации и запуска приложения, скрывая за собой множество
    сложных операций, таких как настройка контекста, создание бинов и другие задачи.
======================================================================================================================
Паттерн Facade в Spring активно используется для упрощения взаимодействия с различными компонентами и подсистемами.
    Вот несколько явных примеров использования фасадов в Spring:
        ApplicationContext — фасад для работы с контейнером IoC.
        HttpSecurity — фасад для настройки безопасности веб-приложений.
        JobLauncher — фасад для работы с задачами в Spring Batch.
        FlowExecutor — фасад для работы с веб-процессами в Spring WebFlow.
        DataSourceTransactionManager — фасад для управления транзакциями.
        MessageChannel и MessageHandler — фасады для работы с обменом сообщениями в Spring Integration.
        SpringApplication — фасад для запуска Spring Boot приложений.

Эти примеры показывают, как Spring использует паттерн фасада для скрытия сложности взаимодействия с различными
    подсистемами и упрощения интерфейсов для разработчиков.