Паттерн заменяет какой то объект чтобы контролировать доступ к другому объекту используется для контроля
    над объектом(кэширование, ленивая загрузка)

Паттерн Proxy в Spring используется для создания объектов, которые служат "заместителями" для других объектов,
    предоставляя дополнительную функциональность, такую как управление доступом, проксирование вызовов, кэширование,
    транзакции, логирование и другие аспекты. Это позволяет динамически оборачивать реальные объекты, добавляя
    дополнительное поведение, без изменения их исходного кода.

Spring AOP (Aspect-Oriented Programming)
Одним из самых распространенных применений паттерна Proxy в Spring является AOP (Aspect-Oriented Programming).
    В этом случае Spring автоматически создает прокси-объекты для классов, для которых настроены аспекты
    (например, для логирования, кэширования или транзакций). Это позволяет добавлять к функциональности объекта
    дополнительные аспекты, такие как перехват вызовов методов.

        @Aspect
        @Before("execution(* com.example.service.*.*(..))")

JDK Proxy (для интерфейсов)
CGLIB Proxy (для классов)
Spring использует эти типы прокси для внедрения аспектов в объект.

Spring's Proxy-based Transaction Management
В Spring Transaction Management используется проксирование для внедрения логики управления транзакциями в методы,
    которые должны быть выполнены в рамках транзакции. Это позволяет динамически оборачивать методы с помощью прокси,
    обеспечивая начало и завершение транзакции.

Spring может использовать JDK Dynamic Proxy или CGLIB для создания таких прокси в зависимости от того,
    используется ли интерфейс для работы с методом или нет.

        @Transactional

Spring Security Proxy-based Authentication and Authorization
Spring Security активно использует паттерн Proxy для реализации механизма аутентификации и авторизации.
    Когда вы используете аннотации безопасности или настраиваете фильтры безопасности, Spring может создать
    прокси для ваших сервисов или контроллеров, чтобы добавить проверки прав доступа или аутентификации.

        @PreAuthorize("hasRole('ADMIN')")

Spring Data JPA — Proxy для репозиториев
Spring Data JPA использует прокси для реализации паттерна Repository. Когда вы создаете интерфейс репозитория,
    Spring автоматически создает прокси для этого интерфейса, который реализует методы для доступа к данным.


Spring's @Autowired и Прокси для Ленивая Загрузка (Lazy Loading)
Проксирование также используется для реализации ленивой загрузки (lazy loading) в Spring. Это особенно актуально
    при работе с зависимостями, которые могут быть созданы только по запросу, например, в случае с @Autowired или
    внедрением зависимостей с аннотацией @Lazy.

Когда вы используете @Lazy на зависимость, Spring создает прокси для этой зависимости, и она будет создана только
    в момент первого обращения.

Spring RMI (Remote Method Invocation)
Spring использует паттерн Proxy для реализации удаленного вызова методов через RMI (Remote Method Invocation).
    В этом случае Spring создает прокси для удаленных объектов, чтобы приложения могли вызывать методы удаленно.

Spring's @Cacheable и Прокси для Кэширования
Spring также использует прокси для реализации кэширования. Когда вы аннотируете метод с @Cacheable,
    Spring создает прокси, который перехватывает вызов этого метода и проверяет, существует ли уже кэшированное
    значение. Если значение есть, оно используется, иначе выполняется метод и результат кэшируется.

Spring Integration Proxy for Message Handling
В Spring Integration используется проксирование для обработки сообщений. Когда сообщения проходят через каналы,
    Spring может создать прокси для компонентов, которые обрабатывают сообщения (например, для MessageHandler),
    обеспечивая таким образом добавление дополнительной функциональности, такой как логирование, трансформация или
    маршрутизация сообщений.
======================================================================================================================
Паттерн Proxy используется в Spring для обеспечения дополнительной функциональности, такой как безопасность,
    транзакционность, кэширование, логирование, ленивое и удаленное внедрение зависимостей и другие аспекты.
    Вот несколько явных примеров его реализации в Spring:
        Spring AOP — создание проксей для внедрения аспектов.
        Управление транзакциями — создание прокси для внедрения транзакционной логики.
        Spring Security — проксирование для проверки прав доступа и аутентификации.
        Spring Data JPA — создание прокси для репозиториев.
        Ленивая загрузка зависимостей — прокси для зависимостей с аннотацией @Lazy.
        RMI — проксирование для удаленного вызова методов.
        Кэширование — проксирование для работы с кэшем (аннотация @Cacheable).
        Spring Integration — создание прокси для обработки сообщений.

Эти примеры показывают, как Spring использует паттерн Proxy для добавления дополнительной функциональности и
    управления объектами в различных подсистемах, улучшая гибкость и расширяемость приложений.